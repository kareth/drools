package com.sample
 
import communication.Attribute;
import communication.Question;

rule "ask people"
    when
    then
      Question.Ask("people");
end

rule "ask tradition"
	salience 2
	when
		Attribute(Name("people"), GreaterThan(1));
	then
		Question.Ask("tradition");
end

rule "ask age"
	when
		Attribute(Name("people"), LessThan(7));
		Attribute(Name("people"), GreaterThan(1));
	then
		Question.Ask("age");
end

rule "ask random"
	when 
		Attribute(Name("people"), LessThan(6));	
		Attribute(Name("age"), LessThan(8));
		Attribute(Name("action"), Equals(false));
	then
		Question.Ask("type_random");
end

rule "superfarmer"
	when
		Attribute(Name("people"), LessThan(5));
		(
			Attribute(Name("type"), Equals("random"));
			or
			Attribute(Name("random"), Equals(true));
		)
	then
		Question.Ask("offer_superfarmer");
end

rule "dungeon twister"
	when
		Attribute(Name("age"), GreaterThan(11));
		Attribute(Name("people"), Equals(2));
		(
			Attribute(Name("random"), Equals(false));
			or
			Attribute(Name("type"), Equals("logic"));
		)
	then
		Question.Ask("offer_dungeon_twister");
end

rule "domino"
	when
		Attribute(Name("tradition"), Equals(true));	
		Attribute(Name("people"), LessThan(5));
		Attribute(Name("people"), GreaterThan(1));
		(
			Attribute(Name("random"), Equals(false));
			or
			Attribute(Name("type"), Equals("logic"));
		)
	then
		Question.Ask("offer_domino");
end

rule "bierki"
	when
		Attribute(Name("tradition"), Equals(true));	
		Attribute(Name("action_kind"), Equals("precision"));
		Attribute(Name("people"), GreaterThan(1));
		Attribute(Name("people"), LessThan(7));
	then
		Question.Ask("offer_bierki");
end

rule "chinczyk"
	when
		Attribute(Name("tradition"), Equals(true));	
		Attribute(Name("people"), LessThan(5));
		(
			Attribute(Name("type"), Equals("random"));
			or
			Attribute(Name("random"), Equals(true));
		)
	then
		Question.Ask("offer_chinczyk");
end

rule "rummikub"
	when
		Attribute(Name("people"), LessThan(5));
		Attribute(Name("age"), GreaterThan(7));
		(
			Attribute(Name("random"), Equals(false));
			or
			Attribute(Name("type"), Equals("logic"));
		)
	then
		Question.Ask("offer_rummikub");
end

rule "madzong"
	when
		Attribute(Name("tradition"), Equals(true));
		Attribute(Name("people"), LessThan(5));
		Attribute(Name("people"), GreaterThan(3));
		(
			Attribute(Name("random"), Equals(false));
			or
			Attribute(Name("type"), Equals("logic"));
		)
	then
		Question.Ask("offer_madzong");
end


rule "corridor"
	when
		Attribute(Name("people"), LessThan(5));
		(
			Attribute(Name("random"), Equals(false));
			or
			Attribute(Name("type"), Equals("logic"));

		)
	then
		Question.Ask("offer_corridor");
end

rule "blokus"
	when
		Attribute(Name("people"), LessThan(5));
		(
			Attribute(Name("random"), Equals(false));
			or 
			Attribute(Name("type"), Equals("logic"));
		)
	then
		Question.Ask("offer_blokus");
end

rule "ask hour"
	when 
		Attribute(Name("age"), GreaterThan(7));
	then
		Question.Ask("hour");
end

rule "ask hour force"
	when 
		Attribute(Name("hour"), Equals(true));
	then
		Question.Ask("hour_force");
end

rule "ask game type"
	when 
		Attribute(Name("hour"), Equals(true));
		Attribute(Name("hour_force"), Equals(false));
		Attribute(Name("people"), LessThan(5));
	then
		Question.Ask("type");
end

rule "ask game type 5 people"
	when 
		Attribute(Name("hour"), Equals(true));
		Attribute(Name("hour_force"), Equals(false));
		Attribute(Name("people"), Equals(5));
	then
		Question.Ask("type_5_people");
end

rule "ask game type 6 people"
	when 
		Attribute(Name("hour"), Equals(true));
		Attribute(Name("hour_force"), Equals(false));
		Attribute(Name("people"), Equals(6));
	then
		Question.Ask("type_6_people");
end

rule "ask game type more than hour"
	when
		Attribute(Name("hour_force"), Equals(true));
	then
		Question.Ask("type_more_than_hour");
end

rule "ask game type less than hour many people"
	when
		Attribute(Name("hour"), Equals(false));
		Attribute(Name("people"), Equals(5));
	then
		Question.Ask("type_less_than_hour_5_people");
end

rule "ask economic"
	when
		Attribute(Name("type"), Equals("strategic"));
	then	
		Question.Ask("economic");
end

rule "ask game preparation time"
	when
		Attribute(Name("type"), Equals("strategic"));
	then
		Question.Ask("preparation");
end

rule "monopoly"
	when
		Attribute(Name("economic"), Equals(true));
	then
		Question.Ask("offer_monopoly");
end

rule "osadnicy_z_catanu"
	when
		Attribute(Name("people"), LessThan(5));
		Attribute(Name("people"), GreaterThan(2));
		Attribute(Name("age"), GreaterThan(11));
		Attribute(Name("economic"), Equals(true));
	then
		Question.Ask("offer_osadnicy_z_catanu");
end

rule "puerto rico"
	when
		Attribute(Name("economic"), Equals(true));
		Attribute(Name("preparation"), GreaterThan(10));
		Attribute(Name("people"), LessThan(6));
		Attribute(Name("people"), GreaterThan(2));
		Attribute(Name("age"), GreaterThan(11));
	then
		Question.Ask("offer_puerto_rico");
end

rule "rokoko"
	when
		Attribute(Name("economic"), Equals(true));
		Attribute(Name("preparation"), GreaterThan(10));
		Attribute(Name("people"), LessThan(6));
		Attribute(Name("age"), GreaterThan(11));
	then
		Question.Ask("offer_rokoko");
end

rule "agricola"
	when
		Attribute(Name("economic"), Equals(true));
		Attribute(Name("people"), LessThan(6));
		Attribute(Name("age"), GreaterThan(11));
	then
		Question.Ask("offer_agricola");
end

rule "ryzyko"
	when
		Attribute(Name("economic"), Equals(false));
	then
		Question.Ask("offer_ryzyko");
end

rule "szachy"
	when
		Attribute(Name("tradition"), Equals(true));	
		Attribute(Name("people"), Equals(2));
		Attribute(Name("economic"), Equals(false));
	then
		Question.Ask("offer_szachy");
end


rule "kolejka"
	when
		Attribute(Name("economic"), Equals(false));
		Attribute(Name("people"), LessThan(6));
		Attribute(Name("age"), GreaterThan(11));
	then
		Question.Ask("offer_kolejka");
end

rule "carcassone"
	when
		Attribute(Name("economic"), Equals(false));
		Attribute(Name("preparation"), GreaterThan(10));
		Attribute(Name("people"), LessThan(6));
		Attribute(Name("age"), GreaterThan(7));
	then
		Question.Ask("offer_carcassone");
end

rule "small world"
	when
		Attribute(Name("economic"), Equals(false));
		Attribute(Name("people"), LessThan(6));
		Attribute(Name("age"), GreaterThan(7));
	then
		Question.Ask("offer_small_world");
end

rule "bitwa morska"
	when
		Attribute(Name("people"), Equals(2));
		(
			(
				Attribute(Name("economic"), Equals(false));
				and
				Attribute(Name("preparation"), GreaterThan(10));
			)
			or
			Attribute(Name("random"), Equals(false));	
		)

	then
		Question.Ask("offer_bitwa_morska");
end

rule "gra o tron"
	when
		Attribute(Name("economic"), Equals(false));
		Attribute(Name("preparation"), GreaterThan(10));
		Attribute(Name("people"), GreaterThan(2));
		Attribute(Name("age"), GreaterThan(11));
	then
		Question.Ask("offer_gra_o_tron");
end

rule "ask action game"
	when
		Attribute(Name("people"), GreaterThan(6));
		or
		Attribute(Name("age"), LessThan(8));
		or
		(
			Attribute(Name("hour"), Equals(false));
			and
			Attribute(Name("people"), GreaterThan(5));
		)
	then
		Question.Ask("type_action");
end

rule "outside"
	when
		Attribute(Name("action"), Equals(true));
		or
		Attribute(Name("type"), Equals("action"));
	then
		Question.Ask("outside");
end

rule "ask action game kind"
	when
		Attribute(Name("outside"), Equals(false));
	then
		Question.Ask("action_kind");
end

rule "ask only one"
	when
		Attribute(Name("people"), Equals(1));
	then
		Question.Ask("only_one");
end
		
rule "robinson crusoe"
	when
		Attribute(Name("only_one"), Equals(true));
		or
		(
			Attribute(Name("age"), GreaterThan(8));
			and
			Attribute(Name("people"), LessThan(5));
			and
			(
				Attribute(Name("type"), Equals("random"));
				or
				Attribute(Name("random"), Equals(true));
			)
		)
	then
		Question.Ask("offer_robinson");
end

rule "genius"
	when
		Attribute(Name("only_one"), Equals(false));
	then
		Question.Ask("offer_genius");
end

rule "dobble"
	when 
		Attribute(Name("action_kind"), Equals("perception"));
	then
		Question.Ask("offer_dobble");
end

rule "jungle speed"
	when 
		Attribute(Name("action_kind"), Equals("speed"));
	then
		Question.Ask("offer_junglespeed");
end

rule "jenga"
	when
		Attribute(Name("action_kind"), Equals("precision"));
	then
		Question.Ask("offer_jenga");
end

rule "pitchcar"
	when
		Attribute(Name("action_kind"), Equals("precision"));
	then
		Question.Ask("offer_pitchcar");
end

rule "angry birds"
	when
		Attribute(Name("outside"), Equals(true));
	then
		Question.Ask("offer_angry_birds");
end

rule "ask unreal"
	when
		Attribute(Name("people"), LessThan(5));
		Attribute(Name("type"), Equals("parody"));
	then
		Question.Ask("unreal");	
end

rule "jumanji"
	when
		Attribute(Name("unreal"), Equals(true));
	then
		Question.Ask("offer_jumanji");
end

rule "dixit"
	when
		Attribute(Name("unreal"), Equals(false));
		or
		(
			Attribute(Name("people"), GreaterThan(4));
			and
			Attribute(Name("type"), Equals("parody"));
		)
		or
		(
			Attribute(Name("people"), GreaterThan(6));
			and
			Attribute(Name("action"), Equals(false));
		)
	then
		Question.Ask("offer_dixit");
end

rule "pedzace zolwie"
	when
		Attribute(Name("people"), GreaterThan(2));
		Attribute(Name("people"), LessThan(6));
		(
			Attribute(Name("type"), Equals("random"));
			or
			Attribute(Name("random"), Equals(true));
		)
	then
		Question.Ask("offer_pedzace_zolwie");
end
	

rule "new attr"
	when
		a: Attribute();
	then
		System.out.println("new Attribute! type: " + a.Name() + ", value: " + a.Value());
end

rule "game found"
	when
		Attribute(Name("game"), Equals(true));
	then
		System.out.println("Finished!");
		drools.halt();
end

rule "game not found"
	salience -1
	when 
		Attribute(Name("game"), Equals(false));
		or
		(
			Attribute(Name("people"), GreaterThan(4));
			and
			Attribute(Name("people"), LessThan(7));
			and
			Attribute(Name("action"), Equals(false));
		)
	then
		System.out.println("Unfortunately, there weren't any games that would fit your criteria.");
		drools.halt();
end